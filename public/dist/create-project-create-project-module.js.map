{"version":3,"sources":["webpack:///./src/app/pages/project/create-project/create-project-form/create-project-form.component.css","webpack:///./src/app/pages/project/create-project/create-project-form/create-project-form.component.html","webpack:///./src/app/pages/project/create-project/create-project-form/create-project-form.component.ts","webpack:///./src/app/pages/project/create-project/create-project-routing.module.ts","webpack:///./src/app/pages/project/create-project/create-project.component.css","webpack:///./src/app/pages/project/create-project/create-project.component.html","webpack:///./src/app/pages/project/create-project/create-project.component.ts","webpack:///./src/app/pages/project/create-project/create-project.module.ts"],"names":[],"mappings":"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","file":"create-project-create-project-module.js","sourcesContent":["module.exports = \"\"","module.exports = \"<form novalidate\\n      [formGroup]=\\\"createProjectForm\\\">\\n    <div class=\\\"row p-t-20\\\">\\n        <div class=\\\"col-md-8\\\">\\n            <div class=\\\"form-group\\\"\\n                 [ngClass]=\\\"{\\n        'has-danger': project.invalid && (project.dirty || project.touched),\\n        'has-success': project.valid && (project.dirty || project.touched)}\\\">\\n                <label class=\\\"control-label\\\">Project School</label>\\n                <input type=\\\"text\\\"\\n                       id=\\\"project\\\"\\n                       placeholder=\\\"project\\\" class=\\\"form-control\\\"\\n                       formControlName=\\\"project\\\"\\n                       required>\\n                <div class=\\\"form-control-feedback\\\"\\n                     *ngIf=\\\"project.errors && (project.dirty || project.touched)\\\">\\n                    <p *ngIf=\\\"project.errors.required\\\">project is required</p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row p-t-20\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\"\\n                 [ngClass]=\\\"{\\n        'has-danger': description.invalid && (description.dirty || description.touched),\\n        'has-success': description.valid && (description.dirty || description.touched)}\\\">\\n                <!--<input type=\\\"text\\\"-->\\n                <!--id=\\\"description\\\"-->\\n                <!--placeholder=\\\"description\\\"-->\\n                <!--formControlName=\\\"description\\\"-->\\n                <!--required>-->\\n                <label class=\\\"control-label\\\">Description</label>\\n                <textarea rows=\\\"4\\\" cols=\\\"50\\\" id=\\\"description\\\"\\n                          placeholder=\\\"description\\\" class=\\\"form-control\\\"\\n                          formControlName=\\\"description\\\"\\n                          required>\\n            </textarea>\\n\\n                <div class=\\\"form-control-feedback\\\"\\n                     *ngIf=\\\"description.errors && (description.dirty || description.touched)\\\">\\n                    <p *ngIf=\\\"description.errors.required\\\">description is required</p>\\n                    <p *ngIf=\\\"description.errors.pattern\\\">The description must contain at least the @ character</p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row p-t-20\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\"\\n                 [ngClass]=\\\"{\\n        'has-danger': symbol.invalid && (symbol.dirty || symbol.touched),\\n        'has-success': symbol.valid && (symbol.dirty || symbol.touched)}\\\">\\n                <label class=\\\"control-label\\\">Symbol</label>\\n                <input type=\\\"text\\\"\\n                       id=\\\"login\\\"\\n                       class=\\\"form-control\\\"\\n                       placeholder=\\\"symbol\\\"\\n                       formControlName=\\\"symbol\\\"\\n                       required>\\n                <div class=\\\"form-control-feedback\\\"\\n                     *ngIf=\\\"symbol.errors && (symbol.dirty || symbol.touched)\\\">\\n                    <p *ngIf=\\\"symbol.errors.required\\\">symbol is required</p>\\n                    <!--<p *ngIf=\\\"symbol.errors.pattern\\\">The symbol address must contain at least the @ character</p>-->\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row p-t-20\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group \\\"\\n                 [ngClass]=\\\" {\\n        'has-danger': profile.invalid && (profile.dirty || profile.touched),\\n        'has-success': profile.valid && (profile.dirty || profile.touched) }\\\">\\n                <label class=\\\"control-label\\\">Assign Users</label>\\n                <select multiple=\\\"multiple\\\" class=\\\"form-control\\\" name=\\\"profile\\\" id=\\\"profile\\\"\\n                        formControlName=\\\"profile\\\">\\n                    <option (mousedown)=\\\"onMouseDown($event, item)\\\" (mousemove)=\\\"$event.preventDefault()\\\"\\n                            *ngFor=\\\"let item of usersListData; let i = index\\\"\\n                            [value]=\\\"item.id\\\">{{item.firstName}}\\n                    </option>\\n                </select>\\n                <!--<input type=\\\"profile\\\"-->\\n                <!--name=\\\"profile\\\"-->\\n                <!--id=\\\"profile\\\"-->\\n                <!--placeholder=\\\"profile\\\"-->\\n                <!--formControlName=\\\"profile\\\"-->\\n                <!--required>-->\\n                <div class=\\\"form-control-feedback\\\"\\n                     *ngIf=\\\"profile.errors && (profile.dirty || profile.touched)\\\">\\n                    <p *ngIf=\\\"profile.errors.required\\\">AssignUsers is required</p>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\"\\n                 [ngClass]=\\\" {\\n        'has-danger': formsubmitted.invalid && (formsubmitted.dirty || formsubmitted.touched),\\n        'has-success': formsubmitted.valid && (formsubmitted.dirty || formsubmitted.touched) }\\\">\\n                <label class=\\\"control-label\\\">Forms</label>\\n                <input type=\\\"text\\\"\\n                       name=\\\"formsubmitted\\\" class=\\\"form-control\\\"\\n                       id=\\\"formsubmitted\\\"\\n                       placeholder=\\\"formsubmitted\\\"\\n                       formControlName=\\\"formsubmitted\\\"\\n                       required>\\n                <div class=\\\"form-control-feedback\\\"\\n                     *ngIf=\\\"formsubmitted.errors && (formsubmitted.dirty || formsubmitted.touched)\\\">\\n                    <p *ngIf=\\\"formsubmitted.errors.required\\\">Forms is required</p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</form>\"","/**\n * Created by rohit on 2018-09-18.\n */\nimport {Component, OnInit} from '@angular/core';\nimport {FormGroup, FormControl, Validators} from '@angular/forms';\nimport {HttpService} from '../../../../shared/services/http.service';\n@Component({\n    selector: 'create-project-form',\n    templateUrl: './create-project-form.component.html',\n    styleUrls: ['./create-project-form.component.css']\n})\n\nexport class CreateProjectFormComponent implements OnInit {\n\n    // project: data.project.value,\n    // formsubmitted: data.formsubmitted.value,\n    // description: data.description.value,\n    // total: data.total.value,\n    // profile: data.profile.value\n    //\n    \n    createProjectForm: FormGroup;\n    project: FormControl;\n    description: FormControl;\n    symbol: FormControl;\n    profile: FormControl;\n    formsubmitted: FormControl;\n    // username: FormControl;\n    // mobile: FormControl;\n    // profile: FormControl;\n\n    usersListData: any;\n    selectedUsers: Array<any>;\n\n    constructor(private _httpService: HttpService) {\n    }\n\n    ngOnInit() {\n        this.createFormControls();\n        this.createForm();\n        this.getUsersList();\n        this.selectedUsers = [];\n    }\n\n    public onMouseDown(event: MouseEvent, item) {\n        event.preventDefault();\n        event.target['selected'] = !event.target['selected'];\n        if (event.target['selected']) {\n            this.selectedUsers.push(item.id);\n            this.createProjectForm.value.profile = this.selectedUsers;\n        } else {\n            let index: number = -1;\n            index = this.createProjectForm.value.profile.indexOf(item.id);\n            if (index > -1) {\n                this.createProjectForm.value.profile.splice(index);\n            }\n        }\n    }\n\n    getUsersList() {\n        this._httpService.get('/usersList')\n            .subscribe(\n                (result: { data: any, msg: string, status: number }) => {\n                    if (result.data) {\n                        this.usersListData = result.data;\n                    } else {\n                        this.usersListData = [];\n                    }\n                })\n    }\n\n    createFormControls() {\n        this.project = new FormControl('', [\n            Validators.required\n        ]);\n        this.description = new FormControl('', [\n            Validators.required\n        ]);\n        this.symbol = new FormControl('', [\n            Validators.required,\n            // Validators.pattern(\"[^ @]*@[^ @]*\")\n        ]);\n        this.profile = new FormControl('');\n        this.formsubmitted = new FormControl('', [\n            // Validators.required,\n            // Validators.minLength(5)\n        ]);\n        // this.username = new FormControl('', [\n        //     Validators.required\n        // ]);\n    }\n\n    createForm() {\n        this.createProjectForm = new FormGroup({\n            project: this.project,\n            description: this.description,\n            symbol: this.symbol,\n            profile: this.profile,\n            formsubmitted: this.formsubmitted,\n            // username: this.username,\n            // mobile: this.mobile,\n            // profile: new FormControl(this.profile, Validators.required)\n        });\n    }\n\n    onSubmit() {\n        console.log('you submitted value: ', this.createProjectForm.value);\n        const formData = this.createProjectForm[\"controls\"];\n        // formData['project'].markAsTouched();\n        // formData['description'].markAsTouched();\n        // formData['symbol'].markAsTouched();\n        // formData['profile'].markAsTouched();\n        // formData['formsubmitted'].markAsTouched();\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {CreateProjectComponent} from './create-project.component';\nconst routes: Routes = [\n    {path: '', component: CreateProjectComponent}\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class CreateProjectRoutingModule {\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n                <form>\\n                    <div class=\\\"form-body\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-6\\\"><h3 class=\\\"card-title\\\">Create Project</h3></div>\\n                            <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-6\\\">\\n                                        <a routerLink=\\\"/project/list\\\" class=\\\"btn btn-success\\\"><i\\n                                                class=\\\"fa fa-check\\\"></i>Project List\\n                                        </a>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <hr>\\n                        <create-project-form></create-project-form>\\n                    </div>\\n                    <div class=\\\"form-actions\\\">\\n                        <button type=\\\"submit\\\" (click)=\\\"saveProject()\\\" class=\\\"btn btn-success\\\"><i\\n                                class=\\\"fa fa-check\\\"></i> Save\\n                        </button>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import {Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\nimport {FormGroup, FormControl, Validators} from '@angular/forms';\nimport {ToastrMessageService} from '../../../shared/services/toastr-message.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {CreateProjectFormComponent} from './create-project-form/create-project-form.component';\nimport {Observable} from 'rxjs'\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {HttpService} from '../../../shared/services/http.service';\n\n@Component({\n    selector: 'app-create-project',\n    templateUrl: './create-project.component.html',\n    styleUrls: ['./create-project.component.css'],\n    providers: [ToastrMessageService]\n})\nexport class CreateProjectComponent implements OnInit {\n\n    @ViewChild(CreateProjectFormComponent) createProjectFormData;\n    model: any;\n    isAdd: boolean = false;\n\n    constructor(private _router: Router, private _httpService: HttpService,\n                private _toastrMessageService: ToastrMessageService) {\n    }\n\n    ngAfterViewInit() {\n        debugger;\n        this.model = this.createProjectFormData.createProjectForm;\n    }\n\n    onSubmit() {\n        this.createProjectFormData.onSubmit();\n    }\n\n    ngOnInit() {\n    }\n\n    saveProject(): void {\n        if (!this.model.valid) {\n            // this.onSubmit();\n            console.log(\"Form is invalid!\");\n            return;\n        }\n        let data = this.model[\"controls\"];\n        debugger;\n        const body = {\n            project: data.project.value,\n            formsubmitted: data.formsubmitted.value,\n            description: data.description.value,\n            symbol: data.symbol.value,\n            profile: data.profile.value || [1, 2]\n        };\n        this._httpService.post('/projectCreate', body)\n            .subscribe(\n                (result: { data: any, msg: string, status: number }) => {\n                    if (result.status) {\n                        this._toastrMessageService.typeSuccess(result.msg);\n                        this._router.navigate(['/project/list']);\n                    } else {\n                        this._toastrMessageService.typeError(result.msg);\n                    }\n                },\n                (error) => {\n                    this._toastrMessageService.typeError(error.error.msg);\n                    this._router.navigate(['/project/create']);\n                });\n\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport {CreateProjectComponent} from './create-project.component';\nimport {CreateProjectFormComponent} from './create-project-form/create-project-form.component';\nimport {CreateProjectRoutingModule} from './create-project-routing.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        CreateProjectRoutingModule,\n        FormsModule\n    ],\n    declarations: [CreateProjectComponent, CreateProjectFormComponent]\n})\nexport class CreateProjectModule {\n}\n"],"sourceRoot":""}
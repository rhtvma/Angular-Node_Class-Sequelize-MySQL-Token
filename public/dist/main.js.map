{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/shared/auth/auth-guard.service.ts","webpack:///./src/app/shared/auth/auth.service.ts","webpack:///./src/app/shared/services/http.service.ts","webpack:///./src/app/shared/services/token-interceptor.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./about/about.module\": [\n\t\t\"./src/app/pages/about/about.module.ts\",\n\t\t\"about-about-module\"\n\t],\n\t\"./contact/contact.module\": [\n\t\t\"./src/app/pages/contact/contact.module.ts\",\n\t\t\"contact-contact-module\"\n\t],\n\t\"./create-project/create-project.module\": [\n\t\t\"./src/app/pages/project/create-project/create-project.module.ts\",\n\t\t\"common\",\n\t\t\"create-project-create-project-module\"\n\t],\n\t\"./home/home.module\": [\n\t\t\"./src/app/pages/home/home.module.ts\",\n\t\t\"home-home-module\"\n\t],\n\t\"./pages/pages.module\": [\n\t\t\"./src/app/pages/pages.module.ts\",\n\t\t\"pages-pages-module\"\n\t],\n\t\"./portfolio/portfolio.module\": [\n\t\t\"./src/app/pages/home/portfolio/portfolio.module.ts\",\n\t\t\"portfolio-portfolio-module\"\n\t],\n\t\"./project/project.module\": [\n\t\t\"./src/app/pages/project/project.module.ts\",\n\t\t\"common\",\n\t\t\"project-project-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {AuthGuardService} from './shared/auth/auth-guard.service';\nconst routes: Routes = [\n    {\n        path: '',\n        loadChildren: './pages/pages.module#PagesModule'\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\"","import {Component, ViewContainerRef} from '@angular/core';\n// import {ToastsManager} from 'ng2-toastr';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    title = 'Test';\n\n    public constructor() {\n    }\n\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {AppComponent} from './app.component';\nimport {AppRoutingModule} from './app-routing.module';\nimport {HashLocationStrategy, LocationStrategy} from \"@angular/common\";\nimport {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {HttpModule} from '@angular/http';\nimport {ToastrModule} from 'ngx-toastr';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {HttpService} from './shared/services/http.service'\nimport {AuthService} from './shared/auth/auth.service'\nimport {AuthGuardService} from './shared/auth/auth-guard.service'\nimport {TokenInterceptorService} from './shared/services/token-interceptor.service'\n\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule, // ToastrModule required animations module\n        ToastrModule.forRoot(), // ToastrModule added\n        FormsModule,\n        AppRoutingModule,\n        HttpModule,\n        HttpClientModule\n\n    ],\n    providers: [\n        HttpService,\n        AuthService,\n        AuthGuardService,\n        {\n            provide: LocationStrategy,\n            useClass: HashLocationStrategy\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInterceptorService,\n            multi: true\n        }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {AuthService} from './auth.service';\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n\n    constructor(private authService: AuthService) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        return this.authService.isAuthenticated();\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs'\nimport {catchError, map, tap} from 'rxjs/operators';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {HttpClient, HttpHeaders, HttpErrorResponse} from \"@angular/common/http\";\nimport {environment} from '../../../environments/environment';\nimport * as _ from 'lodash';\nimport {HttpService} from '../services/http.service';\n\n@Injectable()\nexport class AuthService {\n    token: string;\n\n    constructor(private _http: HttpClient,\n                private _router: Router,\n                private _httpService: HttpService) {\n    }\n\n\n    signupUser(body: any): Observable<any> {\n        return this._httpService.post('/signup', body);\n    }\n\n    signinUser(username: string, password: string): Observable<any> {\n        debugger;\n        const body = {\n            'username': username,\n            'password': password\n        };\n        return this._httpService.post('/login', body)\n            .pipe(\n                tap(\n                    (data: { data: any, response: string, response_message: Array<any> }) => {\n                        if (data.response === 'success') {\n                            if (data && data.data) {\n                                localStorage.setItem('token', data.data);\n                            }\n                            return data;\n                        }\n                    }),\n                catchError(error => Observable.throw(error || 'Internal server error'))\n            );\n    }\n\n    isLoggedIn(): boolean {\n        const isLoggedIn = localStorage.getItem('token');\n        return (isLoggedIn ? true : false);\n    }\n\n    logout(): void {\n        if (this.isLoggedIn()) {\n            localStorage.removeItem('token');\n            const options = {\n                headers: new HttpHeaders()\n                    .set('Authorization', 'bearer ' + this.getToken())\n                    .set('Content-Type', 'application/json')\n            };\n            // return this._http.get(\n            //     this.serverBase + '/auth/logout',\n            //     options\n            // ).map(response => {\n            //     if (response) {\n            //         return response;\n            //     }\n            // }).catch(this._errorHandler);\n        }\n        localStorage.removeItem('token');\n        this.token = null;\n    }\n\n    getUserInfo() {\n        debugger;\n        const userToken = this.getToken();\n        if (userToken) {\n            let payload = userToken.split('.')[1];\n            payload = atob(payload);\n            payload = JSON.parse(payload);\n            return payload;\n        }\n        return null;\n    }\n\n    getRole(): string {\n        const userInfo = this.getUserInfo();\n        if (userInfo) {\n            return userInfo['role'] || '';\n        } else {\n            return null;\n        }\n    }\n\n    getToken(): string {\n        return localStorage.getItem('token');\n    }\n\n\n    isAuthenticated() {\n        if (localStorage.getItem('token')) {\n            return true;\n        }\n        this._router.navigate(['/user/login']);\n        return false;\n    }\n\n    _errorHandler(error: Response) {\n        console.log(error);\n        return Observable.throw(error || 'Internal server error');\n    }\n}\n","import {HttpClient, HttpHeaders, HttpErrorResponse} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {environment} from \"../../../environments/environment\";\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {Observable} from 'rxjs'\nimport {catchError, map, tap} from 'rxjs/operators';\n\n\n@Injectable()\nexport class HttpService {\n    private serverBase: string;\n\n    constructor(private _http: HttpClient,\n                private _spinner: NgxSpinnerService) {\n        this.serverBase = environment.serverBase;\n    }\n\n    get(url): Observable<any> {\n        this._spinner.show();\n        return this._http.get(this.serverBase + url, {})\n    }\n\n    post(url: String, data: any): Observable<any> {\n        this._spinner.show();\n        debugger;\n        const apiEndpoint = `${this.serverBase}${url}`;\n        console.log(`Reaching endpoint: ${apiEndpoint}`);\n        return this._http.post(apiEndpoint, data, {});\n    };\n\n    put(url: String, data: any): Observable<any> {\n        this._spinner.show();\n        const apiEndpoint = `${this.serverBase}${url}`;\n        console.log(`Reaching endpoint: ${apiEndpoint}`);\n\n        return this._http.put(apiEndpoint, data, {});\n    };\n\n    delete(url: String, id: any): Observable<any> {\n        this._spinner.show();\n        // let token = localStorage.getItem('token');\n        // const headers = new HttpHeaders()\n        //     .set('Authorization', 'bearer ' + token)\n        //     .set('Content-Type', 'application/json');\n        const apiEndpoint = `${this.serverBase}${url}`;\n        console.log(`Reaching endpoint: ${apiEndpoint}`);\n        let options = {\n            // headers: headers\n        };\n        return this._http.delete(apiEndpoint + \"/\" + id, options);\n    };\n\n}\n","// To make Intercepter Work We need to Import the HttpClientModule into our application in app\nimport {Injectable} from \"@angular/core\";\nimport {tap} from \"rxjs/operators\";\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n    HttpResponse,\n    HttpErrorResponse\n} from \"@angular/common/http\";\nimport {Observable} from \"rxjs/Observable\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n    constructor() {\n    }\n\n    //function which will be called for all http calls\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        //how to update the request Parameters\n        // const token = localStorage.getItem('token');\n        const updatedRequest = request.clone({\n            headers: request.headers\n                // .set('Authorization', 'bearer ' + token)\n                .set('Content-Type', 'application/json')\n        });\n        // debugger;\n        //logging the updated Parameters to browser's console\n        console.log(\"Before making api call : \", updatedRequest);\n        return next.handle(request).pipe(\n            tap(\n                event => {\n                    //logging the http response to browser's console in case of a success\n                    if (event instanceof HttpResponse) {\n                        console.log(\"api call success :\", event);\n                    }\n                },\n                error => {\n                    //logging the http response to browser's console in case of a failuer\n                    if (event instanceof HttpResponse) {\n                        console.log(\"api call error :\", event);\n                    }\n                }\n            )\n        );\n    }\n}","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n    production: false,\n    serverBase: \"http://localhost:8080\",\n    endpoints: {}\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}